
void print(Tree * p)
{
	if(p==NULL) return;
	cout<<(p->state).cost[0]<<" "<<(p->state).cost[1]<<" "<<(p->state).cost[2];
	cout<<"\t"<<(p->state).rule[0]<<" "<<(p->state).rule[1]<<" "<<(p->state).rule[2]<<endl;
	print(p->left);
	print(p->right);
}


void printin(Tree * p)
{
	if(p==NULL) return;
	cout<<p->node<<"\t";
	for (std::list<int>::iterator i = p->picked_instruction.begin(); i != p->picked_instruction.end(); ++i)
	{
		cout<<*i<<" ";
	}
	cout<<endl;
	printin(p->left);
	printin(p->right);
}

void printsu(Tree * p)
{
	if(p==NULL) return;
	cout<<p->node<<"\t";
	for (int i = 1; i <= nonterms; ++i)
	{
		cout<<" "<<p->nt_reqd[i];
	}
	cout<<"\t\t";
	for (int i = 1; i <= nonterms; ++i)
	{
		cout<<" "<<p->store_reqd[i];
	}
	cout<<endl;
	printsu(p->left);
	printsu(p->right);
}

int main() {
	initialize();
	Tree * p;

	p = create_tree("ASSGN",
			create_tree("ADDR",NULL,NULL,"fp[10]"), 
			create_tree("PLUS", 
				create_tree("PLUS", 
					create_tree("PLUS", 
						create_tree("CON", NULL,NULL,"a"), 
						create_tree("CON", NULL,NULL,"b")), 
					create_tree("PLUS", 
						create_tree("CON", NULL,NULL,"c"), 
						create_tree("CON", NULL,NULL,"d"))),
				create_tree("PLUS", 
					create_tree("PLUS", 
						create_tree("CON", NULL,NULL,"e"), 
						create_tree("CON", NULL,NULL,"f")), 
					create_tree("PLUS", 
						create_tree("CON", NULL,NULL,"g"), 
						create_tree("CON", NULL,NULL,"h")))));


	// p = create_tree("ASSGN",
	// 		create_tree("ADDR",NULL,NULL,"d"), 
	// 		create_tree("PLUS", 
	// 			create_tree("CON", NULL,NULL,"a"), 
	// 			create_tree("CON", NULL,NULL,"b")));


	
// p = create_tree("ASSGN",
// 			create_tree("ADDR",NULL,NULL,"a"), 
// 			create_tree("PLUS", 
// 				create_tree("PLUS", 
// 					create_tree("PLUS", 
// 						create_tree("CON", NULL,NULL,"3"), 
// 						create_tree("CON", NULL,NULL,"4")), 
// 					create_tree("PLUS", 
// 						create_tree("ADDR", NULL,NULL,"a"), 
// 						create_tree("CON", NULL,NULL,"6"))),
// 				create_tree("UMINUS",
// 					create_tree("INT",
// 						create_tree("FLOAT",
// 							create_tree("ADDR",NULL,NULL,"af"),
// 							NULL),
// 						NULL),
// 					NULL)));



	cout<<"The numbering of nodes for instruction selection"<<endl;
	label(p);
	print(p);
	cout<<endl;

	cout<<"Instructions selected at each node"<<endl;
	pick_instr(p,begin_nt);
	printin(p);
	cout<<endl;

	cout<<"Sethi Ullman numbering of each node along with the requirement of store(rightnost numbers)"<<endl;
	su_number(p);
	printsu(p);
	cout<<endl;

	cout<<"Code generated is "<<endl;
	gencode(p);
	cout<<endl;

	return 0;
}